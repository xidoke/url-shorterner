// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id            BigInt      @id @default(autoincrement())
	email         String      @unique
	passwordHash  String      @map("password_hash")
	name          String?
	emailVerified Boolean     @default(false) @map("email_verified")
	tier          UserTier    @default(FREE)
	createdAt     DateTime    @default(now()) @map("created_at")
	updatedAt     DateTime    @updatedAt @map("updated_at")

	links         Link[]
	collections   Collection[]

	@@map("users")
}

enum UserTier {
	FREE
	PAID
	ENTERPRISE
}

model Link {
	id           BigInt     @id // Snowflake ID
	shortCode    String     @unique @map("short_code") @db.VarChar(20)
	longUrl      String     @map("long_url") @db.Text
	userId       BigInt     @map("user_id")
	collectionId BigInt?    @map("collection_id")

	title        String?    @db.VarChar(200)
	description  String?    @db.Text
	status       LinkStatus @default(ACTIVE)

	version      Int        @default(1) // Optimistic locking
	clickCount   BigInt     @default(0) @map("click_count")

	createdAt    DateTime   @default(now()) @map("created_at")
	updatedAt    DateTime   @updatedAt @map("updated_at")
	deletedAt    DateTime?  @map("deleted_at")
	expiresAt    DateTime?  @map("expires_at")

	user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
	collection   Collection? @relation(fields: [collectionId], references: [id])

	@@index([userId, createdAt(sort: Desc)]) // List user's links
	@@index([shortCode]) // Redirect lookup (B-tree)
	@@index([status, createdAt]) // Filter by status
	@@index([collectionId])
	@@map("links")
}

enum LinkStatus {
	ACTIVE
	DELETED
	EXPIRED
	DISABLED // Admin disabled (malicious)
}

model Collection {
	id          BigInt   @id @default(autoincrement())
	name        String   @db.VarChar(100)
	description String?  @db.Text
	userId      BigInt   @map("user_id")

	createdAt   DateTime @default(now()) @map("created_at")
	updatedAt   DateTime @updatedAt @map("updated_at")

	user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
	links       Link[]

	@@index([userId])
	@@map("collections")
}

// Idempotency for API requests (prevent double-creation)
model IdempotencyKey {
	key         String   @id @db.VarChar(100)
	userId      BigInt   @map("user_id")
	requestHash String   @map("request_hash")
	response    Json     // Cached response
	createdAt   DateTime @default(now()) @map("created_at")
	expiresAt   DateTime @map("expires_at")

	@@index([userId])
	@@index([expiresAt]) // For cleanup job
	@@map("idempotency_keys")
}
